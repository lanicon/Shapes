' 2018-12-16 1:25:07 PM Shapes generated by Shapes 2.3b.
'
SB_Workaround()
gw = 598
gh = 428
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
' initialize shapes
Shapes_Init()
' add shapes
scale = 1
angle = 0
iMin = 1
iMax = 50
Shapes_Add()
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 96 ' x offset
  shY = 146 ' y offset
  shape = ""
  shape[1] = "func=ell;x=35;y=114;width=104;height=50;bc=#814A27;pw=0;"
  shape[2] = "func=rect;x=44;y=150;width=9;height=65;bc=#814A27;pw=0;"
  shape[3] = "func=rect;x=57;y=150;width=9;height=65;bc=#814A27;pw=0;"
  shape[4] = "func=rect;x=107;y=150;width=9;height=65;bc=#814A27;pw=0;"
  shape[5] = "func=rect;x=121;y=150;width=9;height=65;bc=#814A27;pw=0;"
  shape[6] = "func=rect;x=40;y=85;width=24;height=47;bc=#814A27;pw=0;"
  shape[7] = "func=ell;x=131;y=116;width=18;height=20;bc=#814A27;pw=0;"
  shape[8] = "func=rect;x=51;y=43;width=7;height=30;bc=#A7842A;pw=0;"
  shape[9] = "func=rect;x=61;y=50;width=7;height=30;bc=#A7842A;pw=0;"
  shape[10] = "func=rect;x=41;y=26;width=7;height=30;angle=297;bc=#A7842A;pw=0;"
  shape[11] = "func=rect;x=71;y=30;width=7;height=30;angle=55;bc=#A7842A;pw=0;"
  shape[12] = "func=rect;x=29;y=6;width=7;height=30;angle=352;bc=#A7842A;pw=0;"
  shape[13] = "func=rect;x=83;y=10;width=7;height=30;angle=7;bc=#A7842A;pw=0;"
  shape[14] = "func=rect;x=38;y=116;width=27;height=7;angle=349;bc=#000000;pw=0;"
  shape[15] = "func=ell;x=28;y=117;width=16;height=16;bc=#C3AB6F;pw=0;"
  shape[16] = "func=rect;x=165;y=205;width=241;height=9;bc=#8C8C8C;pw=0;"
  shape[17] = "func=rect;x=185;y=185;width=9;height=23;bc=#8C8C8C;pw=0;"
  shape[18] = "func=rect;x=377;y=185;width=9;height=23;bc=#8C8C8C;pw=0;"
  shape[19] = "func=rect;x=156;y=191;width=9;height=23;angle=317;bc=#8C8C8C;pw=0;"
  shape[20] = "func=rect;x=69;y=114;width=9;height=52;angle=355;bc=#000000;pw=0;"
  shape[21] = "func=rect;x=73;y=143;width=111;height=9;bc=#000000;pw=0;"
  shape[22] = "func=ell;x=299;y=75;width=92;height=88;bc=#EBE4D0;pw=0;"
  shape[23] = "func=ell;x=239;y=87;width=84;height=88;bc=#9D1010;pw=0;"
  shape[24] = "func=ell;x=258;y=51;width=49;height=57;bc=#EBE4D0;pw=0;"
  shape[25] = "func=rect;x=266;y=66;width=33;height=21;bc=#DBB9A9;pw=0;"
  shape[26] = "func=ell;x=275;y=79;width=13;height=13;bc=#9D1010;pw=0;"
  shape[27] = "func=rect;x=271;y=47;width=32;height=14;angle=13;bc=#9D1010;pw=0;"
  shape[28] = "func=rect;x=274;y=43;width=36;height=13;bc=#9D1010;pw=0;"
  shape[29] = "func=ell;x=306;y=37;width=18;height=20;bc=#EBE4D0;pw=0;"
  shape[30] = "func=rect;x=264;y=89;width=10;height=45;angle=333;bc=#E2D8BB;pw=0;"
  shape[31] = "func=rect;x=283;y=89;width=10;height=63;angle=33;bc=#EBE4D0;pw=0;"
  shape[32] = "func=rect;x=184;y=143;width=202;height=43;bc=#563A1A;pw=0;"
  shape[33] = "func=ell;x=210;y=65;width=24;height=24;bc=#EBE4D0;pw=0;"
  shape[34] = "func=rect;x=215;y=83;width=26;height=34;angle=347;bc=#9D1010;pw=0;"
  shape[35] = "func=rect;x=225;y=90;width=26;height=34;angle=272;bc=#9D1010;pw=0;"
  shape[36] = "func=ell;x=16;y=71;width=56;height=30;bc=#814A27;pw=0;"
  shape[37] = "func=ell;x=41;y=75;width=12;height=12;bc=#000000;pw=0;"
  shape[38] = "func=ell;x=7;y=79;width=14;height=14;bc=#9D1010;pw=0;"
  shape[39] = "func=ell;x=64;y=72;width=24;height=12;angle=340;bc=#814A27;pw=0;"
  shape[40] = "func=rect;x=259;y=71;width=17;height=4;angle=350;bc=#EBE4D0;pw=;"
  shape[41] = "func=rect;x=288;y=71;width=17;height=4;angle=18;bc=#EBE4D0;pw=;"
  shape[42] = "func=rect;x=98;y=19;width=7;height=30;angle=81;bc=#A7842A;pw=0;"
  shape[43] = "func=rect;x=17;y=16;width=7;height=30;angle=287;bc=#A7842A;pw=0;"
  shape[44] = "func=rect;x=115;y=5;width=7;height=30;angle=16;bc=#A7842A;pw=0;"
  shape[45] = "func=rect;x=0;y=0;width=7;height=30;angle=338;bc=#A7842A;pw=0;"
  shape[46] = "func=ell;x=289;y=81;width=21;height=22;bc=#EBE4D0;pw=0;"
  shape[47] = "func=ell;x=255;y=83;width=21;height=22;bc=#EBE4D0;pw=0;"
  shape[48] = "func=ell;x=265;y=71;width=14;height=14;bc=#FFFFFF;pc=#000000;pw=2;"
  shape[49] = "func=ell;x=285;y=71;width=14;height=14;bc=#FFFFFF;pc=#000000;pw=2;"
  shape[50] = "func=line;x=277;y=77;x1=0;y1=0;x2=10;y2=0;pc=#000000;pw=2;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
