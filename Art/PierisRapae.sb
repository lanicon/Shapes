' Pieris Rapae (Butterfly)
' Version 0.1
' Copyright Â© 2016 Nonki Takahashi.  The MIT License.
' Program ID XNH612

GraphicsWindow.Title = "Pieris Rapae (Small White)"
GraphicsWindow.BackgroundColor = "SkyBlue"
SB_RotateWorkaround()
Init()
Right_Init()
asX = 300
Shapes_ConvertRightToLeft()
Body_Init()
scale = 0.7
iMin = 1
iMax = 31
n = Array.GetItemCount(pos)
For j = 1 To n
  Shapes_Add()
  x = pos[j]["x"]
  y = pos[j]["y"]
  Shapes_Move()
  angle = pos[j]["angle"]
  Shapes_Rotate()
EndFor

Sub Init
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  angle = 0
  pos[1] = "x=100;y=50;angle=20;" 
  pos[2] = "x=300;y=10;angle=-10;"
  pos[3] = "x=200;y=180;angle=-5;"
  pos[4] = "x=300;y=300;angle=10;"
EndSub

Sub Right_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 262 ' x offset
  shY = 127 ' y offset
  shape = ""
  shape[1] = "func=ell;x=148;y=19;width=15;height=49;bc=#4C4134;pw=0;"
  shape[2] = "func=ell;x=131;y=5;width=15;height=42;angle=77;bc=#4C4134;pw=0;"
  shape[3] = "func=ell;x=76;y=0;width=44;height=115;angle=66;bc=#FFFFFF;pw=0;"
  shape[4] = "func=ell;x=88;y=4;width=24;height=116;angle=77;bc=#FFFFFF;pw=0;"
  shape[5] = "func=ell;x=55;y=44;width=104;height=50;bc=#FFFFFF;pw=0;"
  shape[6] = "func=ell;x=60;y=84;width=94;height=31;angle=28;bc=#FFFFFF;pw=0;"
  shape[7] = "func=ell;x=33;y=95;width=84;height=37;angle=49;bc=#FFFFFF;pw=0;"
  shape[8] = "func=ell;x=83;y=105;width=67;height=42;angle=335;bc=#FFFFFF;pw=0;"
  shape[9] = "func=ell;x=118;y=51;width=16;height=10;angle=347;bc=#4C4134;pw=0;"
  shape[10] = "func=ell;x=123;y=70;width=13;height=11;angle=3;bc=#4C4134;pw=0;"
  shape[11] = "func=ell;x=91;y=83;width=38;height=5;angle=352;bc=#4C4134;pw=0;"
  shape[12] = "func=ell;x=123;y=98;width=10;height=6;angle=22;bc=#4C4134;pw=0;"
EndSub

Sub Body_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shape[25] = "func=line;x=0;y=27;x1=0;y1=0;x2=36;y2=35;pc=#4C4134;pw=2;"
  shape[26] = "func=line;x=41;y=24;x1=0;y1=38;x2=37;y2=0;pc=#4C4134;pw=2;"
  shape[27] = "func=ell;x=32;y=59;width=7;height=8;bc=#000000;pw=0;"
  shape[28] = "func=ell;x=37;y=59;width=7;height=8;bc=#000000;pw=0;"
  shape[29] = "func=ell;x=31;y=65;width=15;height=25;bc=#4C4134;pw=0;"
  shape[30] = "func=ell;x=33;y=87;width=11;height=27;bc=#4C4134;pw=0;"
  shape[31] = "func=ell;x=35;y=109;width=7;height=30;bc=#4C4134;pw=0;"
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_ConvertRightToLeft
  ' Shapes | Initialize left shapes data from right shapes
  ' param asX - axis of symmetry X coordinate
  nShapes = Array.GetItemCount(shape)
  For i = 1 To nShapes
    shape[i + nShapes] = shape[i]
    If shape[i]["func"] = "line" Then
      dx = shX + shape[i]["x"] - asX
      x = asX - dx
      dx = shX + shape[i]["x"] + shape[i]["x1"] - asX
      x1 = asX - dx
      shape[i + nShapes]["x1"] = x1 - x
      dx = shX + shape[i]["x"] + shape[i]["x2"] - asX
      x2 = asX - dx
      shape[i + nShapes]["x2"] = x2 - x
      shape[i + nShapes]["x"] = x - shX
    ElseIf shape[i]["func"] = "tri" Then
      width = shape[i]["x3"] - shape[i]["x2"]
      dx = shX + shape[i]["x"] - asX
      x = asX - dx - width
      shape[i + nShapes]["x"] = x - shX
      shape[i + nShapes]["angle"] = -shape[i]["angle"]
    ElseIf shape[i]["func"] = "ell" Then
      dx = shX + shape[i]["x"] - asX
      x = asX - dx - shape[i]["width"]
      shape[i + nShapes]["x"] = x - shX
      shape[i + nShapes]["angle"] = -shape[i]["angle"]
    EndIf
  EndFor
EndSub

Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub

Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub

Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
  